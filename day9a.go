package main

import (
	"fmt"
	"strconv"
	"strings"
)

func main() {

	inputString := "8656456789432129876532356789899998754320146789767893213468953205459323997678901997655423567797655667654534599654323498732156789679874988653123569765799930498976431237899988656789987654321234567954315654312398796943498764323989459765329977823567895478989198987654345679887654567899976543234567896543456520139768989556987543499239854321098993768996536587998789876597679876544245690198965654567899875456763129765767969799875678934976543212965487979762745678967899769878999743213678999987676569896998788797999898445689898698979964598765434398659945992102358934599988999959865435456998889898768994589989989898766532345678954998987968989675649876789987421346932398899942134987654676789767891987894357899999599985432123479912345999989969987678998989987653245789198767899101349876789889655679019896545678989945987653101389210149689987995439878932989649895475989209865989891399998789999643468912498765978987983459977731257893929899987578932498932127893499987699439877487568998899989998894234979957987989987667134999864346789989679879546789023964345678998999878994976532648998768899398678912456789929987897555824989976549899987659876543567893499546779998789998998998742123789965779929755690123989654997678943463987898775894359979879864236789998766789998767999998799763104569987456789864398923579896987656789235987676998678946989876543204589888989899998765898998769865432377959435789795328789979878919986789012399654545998976987599795641579767789995498765476799975699764578994921669865410266789876790139799892459895323457998987646898783298965767889698984328456789678998569978989234598632134567896589999989569346978991234568986543578989436989345397898765321235989989965969876787894598765434688999545988769445895645678954567929795246999654567920123679988644345789569995439876546678968998654567999843497655323478973458976569891298912349876768943224459899976646789643598759876543456789942987869899873298654321236898456789867893298789945798987965456959876598775789965699997896543234678932109898999876445987643434578956789799897439767989678999899759989496545988689989798898999763212456789931298943298786899995454578907989467999654984676978979995989877929012679979987998775667895452356799789298789212999894298956567891899234689879599323589976789459876569893456789987679865435678967345989567899967892345799698789967894393214567899898921246889569439876545678969899987549876542346789845789545699875468946789899767789998945432357899877789013467897899876543458987999986543499875345689875699875979876435689789976564569986789664356799876567892567899892196543235689999877543298698545678999698998989898654679899876542367896579976567989898745678997892399399543212456899876543019954966778999898799987878976579568798765345697545898799989878965678969899197898765534345796976543219876398889999976767987656789878945265987875678923578998867976987678935499897698997754565689598765432398123999559876545998754587998943212349897679999998998765443469899921239877556789896567679767987655498543468943988532987664345689965534645699898958789998765321235898765019986543567998787889989899876898765557995987632129854323799998779878978999964567898986521075678965419876433245678989899549998698996988676898997654329876554567898989098998998765345679699543319878965432399542101678999495432987654976569988798769876556898766778996789412932934965423978959878543499987654549865423456789434956099979987542109989765799876796997798975568932999101987921789954098765456789976566987653466789432989998999869966782569992467898789549899954445689978899249893267896512987767789698967899876457899874987887789875798784345789124578999893999877323459876567895987534899992399897889759997898998756899876569679567898434989545678901238998777989996543469898745578979767598977398995999989878999789976896598969854645678902349767698989334989766567898767457976432349976797879786698799432099865779767899795546989876353498921449989898997995997865645679987996999876357899459899765458967894398995456895678989323597654321298943359889998789688987655443468899987989996546899896799765434645688998765432992349999431239898731098789449876789964356789854331235678987647898775678978989987632343456792987994989365678921012698764998967895976569789424567986521012357999853568998778976799987642126456792139898967897678943242456987987685678976545767896599899964214546987876237978998943589987673101659789109898785678998965544399999899853488999543445678967899987632345987643212346789953235987654321279899899879865378921989876798789993596768998762123478987899987654596987654210123467896434699886543579875778976897429799097899798767893298787976998455456789897899887678789886532326459899864578998795469873456789597653567898678999965693210989995459756856789395698999878989299869343466789997568965998677876234789978985457897659999789468939199768956989788799123456789999999534897845468999698767895456989899537889429987667893986798767835679898965998789989989895456989988998764569875657894356997896432129699754578951239987891249899655312459878799678989999999678956789987678989767999779896576799895432101357886578976239439899935699874310139876767899999989998756796799986856799997898988999998793297654321256899767898939894599989689876548923976465678999987899754579999997544334989898789939879998919876654345678987999989878979886899998785754987533458999896599984326789987643212377898767954996789789998876545799909899876566789876569998989676598542136999879548899543459139876210145698765789987567869899998967699991995495434589998745799769879898762104789986313767895876799599737123498787366799546565679953987879989989698921347899985698765699199987321567896530145678998989749897654498764324567893134456789459999876787898789235689987678975432101976543234899872123457899989965978996567997321245789201234567899999875437678969894567899898987654321298776564599654323456799986579986798967899541013467894234567896789195432656954878987899997989876743534998767667899876467891987749876567789898764314458898678579893569101954154789346789992987657899985764678988877899998757991019543298543567990996532346799979967991238999986526569325466789398754679459988568989998999987986945919976598754245689198754556789998987893254567899768767891234569649764349657899867967899924987659789689889998754313456897987766789789999891987567899987988891012367979898219896799998934798921297654399879876789986210127994569989889456979893239978999999899993257345899878992978989987932356789934984321099934589987542133789349899399239976878934998921989892765434786789876878976789219654457789789697643919875569899965323467929878921019876576789578999987679199876567899996545789578999876667989356798975989999787978497965468929876789213498646568998999899656894698798898998767689437578998977899219789789987890989975435987698921097586893998953245699999878454597278998999789989899212645989999895439899867895692129876542469878999297543568989796536978999996732345602998788767899399870123467898798959978795678979323986543137999967899876457967568968789999896542123591998765655678921096543458993456789876565456789545459432102987435678999856965945899989659876532103498989875443458943298767896791234567898543423469895789764321987632389989976789312678899434598767892499797699631246789434987899789019567899763210125678989987556987654399887998989410127678986599987998998658754321024569654579899989219897898765462133456789239976999876598767678989432123456998767899987678943986554214767976598999999899879892987687323557899534698989998998765455797655334956789987999459898943279876532678898767946789876576890129899893567899964598976899986988423468987644989789789989899899965216699879879999987912459876543579934597699868996789598656579997569976456799879597899569987879979789632542098999899999892346898763245689598743498986567898764345689643498896889999798696549876546896757954465323999878889994365678998546679898764256989545999865323978954234998799799965658943498765796564989657683469885467997598798998768788979654214567895789997710145694312345989767986434689456987896432367896979499876434678967991934988989986896532357897689986543123678910346679765697542689656789895452135678989998996532356789894012399999876545966545678979469766423456789945678989439765456798789398632101457997898765432123499995319398989998768789785789989023497656466789789678989991297676789999329974321234889679989984343568998949898787899987899989789456919999878797899767899987898939898899798899876543344567856799986567467978789876567679999899979599234789878999989898997892345699789898996568678999765876767994598789767899896569876645456789995986543205589876545679998789890124879767566798745556789597698787893328656989899995439876543236799976469899645699198543458998867993243899875437578943234699345978989893231234899999896542498643212789986534998895998909975956998754976535467996632345989212689324999919993211012679999879953198765438989999767989778987649898989999954319865678987542159987992357921989432987990432357898876789323987956789989987986565989743578987988789540297679999953109897678946789987894987678954349899764589943459986789587899987643497653246796647659865149878999765429878956789899987678954659776565789993256789469899989345678998765239896213469543224998695698989987669876474788999987656789213456767989986434589659875459125799998765434598930467894210578998999967899879876535356789998654867890287887989989796567896896432104568978997657698789135678939878998798965459998999862123688987654345799245679987897898767998798754321567976788978998767894579954598999965689659898999875433456789976755989895699865645678987893989989643237896556789989245996567896799978989779999876787997655767789998876789879978965432369899899219989895435994344589997513467987898789976687999987543545679876677899689999789876889917654345678997892987978994678912349998540125689898989786554677897643263566799789893457943989768457990876765689956678997656778989910125798763123459995789765432345698653210234589989995456789109865434578998889879103456789854356789432123467997325456789456989864346789995433134767899298776789321397654569919999998931234589997523567894324578999843756789234579997876899987654574597894212998989653345989987890"
	inputStringSlice := strings.Split(inputString, "")
	var twoDinputArray [100][100]int
	counter1 := 0
	counter2 := 0
	for i := 0; i < len(inputStringSlice); i++ {
		if counter2 > 99 {
			counter1++
			counter2 = 0
		}
		twoDinputArray[counter1][counter2], _ = strconv.Atoi(inputStringSlice[i])
		counter2++
	}
	fmt.Println(twoDinputArray)
	sum := 0
	for i := 0; i < 100; i++ {
		for j := 0; j < 100; j++ {
			current := twoDinputArray[i][j]
			current_equal_counter := 0
			if i-1 >= 0 {
				upper := twoDinputArray[i-1][j]
				if upper < current {
					continue
				}
				if upper == current {
					current_equal_counter += 1
				}
			}
			if i+1 < len(twoDinputArray) {
				lower := twoDinputArray[i+1][j]
				if lower < current {
					continue
				}
				if lower == current {
					current_equal_counter += 1
				}
			}
			if j-1 >= 0 {
				left := twoDinputArray[i][j-1]
				if left < current {
					continue
				}
				if left == current {
					current_equal_counter += 1
				}
			}
			if j+1 < len(twoDinputArray[i]) {
				right := twoDinputArray[i][j+1]
				if right < current {
					continue
				}
				if right == current {
					current_equal_counter += 1
				}
			}
			if current_equal_counter > 1 {
				continue
			}
			sum += (current + 1)
		}
	}
	fmt.Println(sum)
}
